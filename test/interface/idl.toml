# interface for model that showcases the complexity that model interfaces support
# - all data types
# - fixed length arrays, nd-arrays
# - variable length 1D arrays
# - dictionaries

# The high level interface of the model is defined by the `root` key
# so that tagging of specific portions of the interface can be done.
# - rsiswrap by will search for the ['in', 'out', 'data', 'params'] keys specifically
[model]
name = "all_data_types"
desc = "Example model showing all supported data types in RSIS"

[types.all_data_types]
desc = "top level interface"
fields = [
    {name="input", type="all_data_types_in", tag="in"},
    {name="output", type="all_data_types_out", tag="out"},
    {name="data", type="all_data_types_data", tag="data"},
    {name="params", type="all_data_types_params", tag="params"},
]

[types.all_data_types_in]
desc = "model inputs"
fields = [
    {name="signal", type="f64", default=1.0, unit="m", desc="a floating point default"}
]

[types.all_data_types_out]
desc = "model outputs"
fields = [
    {name="measurement", type="f32", default=1.0, unit="m", desc="a simulated sensor measurement"}
]

[types.all_data_types_data]
desc = "model internal data"
fields = [
    {name="internalflag", type="bool", default=true},
    {name="queue",   type="i32", dims=[-1], default=[0], desc="a list of queued ints"},
    {name="amatrix", type="u32", dims=[3,3], default=[[1, 0, 0], [0, 2, 0], [0, 0, 21]], desc="a matrix"},
]

[types.all_data_types_params]
desc = "model parameters, loaded at initialization"
fields = [
    {name="noise",   type="Complex", generic=["f64"], unit="V"},
    {name="noiseSq", type="Complex", generic=["f32"], dims=[3]},
    {name="name", type="String", default="Sensor_Jan_359", desc="Sensor name"},
    {name="txt", type="HashMap", generic=["String", "String"]},
]
